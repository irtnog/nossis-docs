# nossis-docs, serverless hosting for static, private web sites that
# works like GitHub Pages
#
# Copyright (C) 2024  Matthew X. Economou
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see
# <https://www.gnu.org/licenses/>.

---
name: Continuous Integration


# Trigger this workflow manually, by pushing commits to any branch, or
# by filing a pull request.
on:
  workflow_dispatch:
  push:
  pull_request:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository as of this commit and cache the
      # working directory for use in other jobs or for re-use if
      # re-running the workflow (e.g., something outside of GitHub
      # Actions broke).
      - id: cache-workdir
        uses: actions/cache@v4
        with:
          key: workdir-${{ github.sha }}
          path: .

      # Python Semantic Release needs the history of all branches/tags
      # to calculate the next version number and build the change log.
      - if: steps.cache-workdir.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Fingerprint the source code.  Use this identifier instead of
      # the commit ID to prevent non-code changes from altering
      # builds.
      - id: hash-source-code
        run: make hash-source-code >> "$GITHUB_OUTPUT"
        shell: bash
    outputs:
      source-hash: ${{ steps.hash-source-code.outputs.hash }}


  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: workdir-${{ github.sha }}
          path: .

      # Use the oldest supported version of Python when linting to
      # catch forward compatibility issues.  Keep this in sync with
      # the freeze, test-matrix, build-matrix, and docs jobs;
      # cf. https://devguide.python.org/versions/.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      # Install additional linter dependencies here.
      - uses: opentofu/setup-opentofu@v1.0.2
      - run: |
          curl -sL https://terraform-docs.io/dl/v0.19.0/terraform-docs-v0.19.0-Linux-amd64.tar.gz \
          | tar -C /usr/local/bin -xzf - terraform-docs
      - run: pip install checkov
      - uses: terraform-linters/setup-tflint@v4
      - uses: aquasecurity/setup-trivy@v0.2.0

      # Double-check code syntax/style.  This ought to happen in a
      # pre-commit hook, but not everyone may have that installed.
      - uses: pre-commit/action@v3.0.1


  freeze:
    needs:
      - setup
      - lint
    runs-on: ubuntu-latest
    steps:
      # Only do this once.  Testing (the next step) should reveal any
      # compatibility issues.  Source code changes, such as an updated
      # version constraint in pyproject.toml, will automatically
      # invalidate the list of pinned dependencies and trigger its
      # regeneration since we're keying off the source hash.
      - id: cache-requirements
        uses: actions/cache@v4
        with:
          key: requirements-${{ needs.setup.outputs.source-hash }}
          lookup-only: true
          path: |
            requirements.txt
            terraform.lock.hcl
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          key: workdir-${{ github.sha }}
          path: .

      # Use the oldest supported version of Python when generating
      # dependency pins to catch forward compatibility issues.  Keep
      # this in sync with the lint, test-matrix, build-matrix, and
      # docs jobs; cf. https://devguide.python.org/versions/.
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        id: setup-pip-tools
        run: pip install pip-tools
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        uses: opentofu/setup-opentofu@v1.0.2

      # Make builds reproducible by pinning every dependency as of
      # this moment.  That way, anyone can re-build this version of
      # the project later and get the same result without tasking
      # developers with version pin maintenance.
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        id: freeze-deps-python
        run: pip-compile -o requirements.txt pyproject.toml
      - if: steps.cache-requirements.outputs.cache-hit != 'true'
        id: freeze-deps-opentofu
        run: |
          tofu providers lock
          mv .terraform.lock.hcl terraform.lock.hcl


  test-matrix:
    needs:
      - setup
      - freeze
    runs-on: ubuntu-latest
    strategy:
      # Test across supported Python versions.  Keep this in sync with
      # the lint, freeze, build-matrix, and docs jobs;
      # cf. https://devguide.python.org/versions/.
      matrix:
        python-version:
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      # Tests take a long time to run, so only re-run them when (1)
      # they fail or (2) when the source code changes.  This step
      # caches the output of a successful test run.  Subsequent steps
      # only run if that cache doesn't exist.  (GitHub Actions jobs
      # can only exit early with an error; cf.
      # https://github.com/orgs/community/discussions/26885.)
      - id: cache-pytest-results
        uses: actions/cache@v4
        with:
          key: pytest-${{ matrix.python-version }}-${{ needs.setup.outputs.source-hash }}
          lookup-only: true
          path: pytest.out

      # Test against all supported language runtimes using the
      # dependency versions pinned above.
      - if: steps.cache-pytest-results.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          key: requirements-${{ needs.setup.outputs.source-hash }}
          path: |
            requirements.txt
            terraform.lock.hcl
      - if: steps.cache-pytest-results.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          key: workdir-${{ github.sha }}
          path: .
      - if: steps.cache-pytest-results.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - if: steps.cache-pytest-results.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
          pip install -e ".[test]"

      # Run the test suite and generate a code coverage report.
      - if: steps.cache-pytest-results.outputs.cache-hit != 'true'
        uses: pavelzw/pytest-action@v2
        with:
          custom-arguments: --cov=nossis_docs --report-log=pytest.out


  release:
    needs:
      - setup
      - test-matrix
    runs-on: ubuntu-latest
    permissions:
      # Allow this job to log into GitHub and thereby update its
      # permissions.  (Think of this like adding someone to
      # `sudoers`.)
      id-token: write

      # Give the job permission to update the change log and to tag
      # the release via Python Semantic Release.
      contents: write
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: workdir-${{ github.sha }}
          path: .
      - id: release
        if: github.ref == 'refs/heads/main'
        uses: python-semantic-release/python-semantic-release@v8.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # The build process might download and run third-party code, so
      # pass the now release-ready source code to an unprivileged job.
      - uses: actions/cache/restore@v4
        with:
          key: requirements-${{ needs.setup.outputs.source-hash }}
          path: |
            requirements.txt
            terraform.lock.hcl
      - uses: actions/cache/save@v4
        with:
          key: release-${{ github.sha }}
          path: .
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}


  build-matrix:
    needs:
      - release
    if: needs.release.outputs.released == 'true'
    strategy:
      # Use the oldest supported version of Python when building pure
      # Python packages.  Keep this in sync with the lint, freeze,
      # test-matrix, and docs jobs;
      # cf. https://devguide.python.org/versions/.
      matrix:
        python-version:
          - '3.11'
    runs-on: ubuntu-latest
    steps:
      # Build the distribution.
      - uses: actions/cache/restore@v4
        with:
          key: release-${{ github.sha }}
          path: .
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - run: pip install build
      - run: python -m build

      # The build process could run malicious third-party code in a
      # supply chain attack, so this job doesn't run with elevated
      # privileges.  Instead, it uploads the built distribution into
      # an immutable archive (a GitHub Actions Artifact) that
      # subsequent, privileged jobs will publish on PyPI, GitHub, etc.
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.python-version }}
          path: dist/*
          if-no-files-found: error


  merge:
    needs:
      - build-matrix
    runs-on: ubuntu-latest
    steps:
      # Merge build artifacts.
      - uses: actions/upload-artifact/merge@v4
        with:
          name: build-artifacts
          pattern: build-artifacts-*
          delete-merged: true


  docs:
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: release-${{ github.sha }}
          path: .

      # Use the oldest supported version of Python when generating
      # documentation to catch forward compatibility issues.  Keep
      # this in sync with the lint, freeze, test-matrix, and
      # build-matrix jobs; cf. https://devguide.python.org/versions/.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      # Generate hypertext and print media.
      - run: make docs

      # The document generation process could run malicious
      # third-party code in a supply chain attack, so this job doesn't
      # run with elevated privileges.  Instead, it uploads
      # documentation into an immutable archive (a GitHub Actions
      # Artifact) that a subsequent, privileged job will publish.
      - uses: actions/upload-artifact@v4
        with:
          name: doc-artifacts
          path: build/*
          if-no-files-found: error
          overwrite: true


  gh-pages:
    needs:
      - release
      - docs
    runs-on: ubuntu-latest
    permissions:
      # Allow this job to push web content to the gh-pages branch.
      contents: write
    steps:
      # Publish the web content using GitHub Pages.
      - uses: actions/download-artifact@v4
        with:
          name: doc-artifacts
          path: build/
          merge-multiple: true
      - uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: build/html
          github_token: ${{ secrets.GITHUB_TOKEN }}


  github:
    needs:
      - release
      - build-matrix
      - merge
      - docs
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      # Allow this job to log into GitHub and thereby update its
      # permissions.
      id-token: write

      # Give the job permission to create a release on GitHub.
      contents: write
    steps:
      - uses: actions/cache/restore@v4
        with:
          key: release-${{ github.sha }}
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: doc-artifacts
          path: build/
          merge-multiple: true

      # Third parties should be able to build and deploy the exact
      # same distribution for verification purposes.
      - run: |
          cp requirements*.txt terraform.lock.hcl dist/

      # Publish built distributions and documentation on GitHub.
      - uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.release.outputs.tag }}
